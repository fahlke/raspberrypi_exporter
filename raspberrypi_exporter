#!/bin/bash

set -eu

VCGEN="$(command -v vcgencmd)"
METRICS_FILE="/var/lib/node_exporter/textfile_collector/raspberrypi-metrics.prom"
TMP_FILE="${METRICS_FILE}.tmp"
PREFIX="rpi_"

# remove existing files
rm -f "${TMP_FILE}"

# get temperatures
{
  echo "# HELP ${PREFIX}temperature Temperatures of the components in degree celsius.";
  echo "# TYPE ${PREFIX}temperature gauge";
} >> "${TMP_FILE}"
for SENSOR in $(ls /sys/class/thermal/); do
  unset CPU_TEMP_CELSIUS
  unset CPU_TYPE

  if [ -f "/sys/class/thermal/${SENSOR}/temp" ]; then
    CPU_TEMP_CELSIUS="$(awk '{printf "%.3f", $1/1000}' /sys/class/thermal/${SENSOR}/temp)" || true
    CPU_TEMP_CELSIUS="${CPU_TEMP_CELSIUS:=0}"
    CPU_TYPE="$(cat /sys/class/thermal/${SENSOR}/type)"
    CPU_TYPE="${CPU_TYPE:=N/A}"

    echo "${PREFIX}temperature{sensor=\"${SENSOR}\",type=\"${CPU_TYPE}\"} ${CPU_TEMP_CELSIUS}" >> "${TMP_FILE}"
  fi
done

# get component frequencies
{
  echo "# HELP ${PREFIX}frequency Clock frequencies of the components in hertz.";
  echo "# TYPE ${PREFIX}frequency gauge";
} >> "${TMP_FILE}"
declare -a FREQ_COMPONENTS=("arm" "core" "h264" "isp" "v3d" "uart" "pwm" "emmc" "pixel" "hdmi")
for FREQ_COMPONENT in "${FREQ_COMPONENTS[@]}"; do
  unset FREQUENCE

  FREQUENCE="$($VCGEN measure_clock "${FREQ_COMPONENT}" | cut -d '=' -f 2)" || true
  FREQUENCE="${FREQUENCE:=0}"

  echo "${PREFIX}frequency{component=\"${FREQ_COMPONENT}\"} ${FREQUENCE}" >> "${TMP_FILE}"
done

# get component voltages
{
  echo "# HELP ${PREFIX}voltage Voltages of the components in volts.";
  echo "# TYPE ${PREFIX}voltage gauge";
} >> "${TMP_FILE}"
declare -a VOLT_COMPONENTS=("core" "sdram_c" "sdram_i" "sdram_p")
for VOLT_COMPONENT in "${VOLT_COMPONENTS[@]}"; do
  unset VOLTS

  VOLTS="$($VCGEN measure_volts "${VOLT_COMPONENT}" | cut -d '=' -f 2 | sed 's/V$//')" || true
  VOLTS="${VOLTS:=0}"

  echo "${PREFIX}voltage{component=\"${VOLT_COMPONENT}\"} ${VOLTS}" >> "${TMP_FILE}"
done

# get memory split of CPU vs GPU
{
  echo "# HELP ${PREFIX}memory Memory split of CPU and GPU in bytes.";
  echo "# TYPE ${PREFIX}memory gauge";
} >> "${TMP_FILE}"
declare -a MEM_COMPONENTS=("arm" "gpu")
for MEM_COMPONENT in "${MEM_COMPONENTS[@]}"; do
  unset MEM

  MEM="$($VCGEN get_mem "${MEM_COMPONENT}" | cut -d '=' -f 2 | sed 's/M$//')" || true
  MEM="${MEM:=0}"
  MEM="$(( MEM * 1024 * 1024 ))"

  echo "${PREFIX}memory{component=\"${MEM_COMPONENT}\"} ${MEM}" >> "${TMP_FILE}"
done

# get throttled flags
{
  echo "# HELP ${PREFIX}throttled Throttled state of the system.";
  echo "# TYPE ${PREFIX}throttled gauge";
} >> "${TMP_FILE}"
THROTTLED="$($VCGEN get_throttled | cut -d '=' -f 2 | sed 's/M$//')" || true
THROTTLED=${THROTTLED:=0x0}
declare -a THROTTLED_COMPONENTS=(
  "0:under_voltage_detected"
  "1:arm_freq_capped"
  "2:currently_throttled"
  "3:soft_temp_limit_active"
  "16:under_voltage_occured"
  "17:arm_freq_capping_occured"
  "18:throttling_occured"
  "19:soft_temp_limit_occured"
)
for THROTTLED_COMPONENT in "${THROTTLED_COMPONENTS[@]}"; do
  unset BIT

  BIT=$(perl -e "printf(($THROTTLED>>${THROTTLED_COMPONENT/%:*/})&1)")

  echo "${PREFIX}throttled{bit=\"${THROTTLED_COMPONENT/%:*/}\",name=\"${THROTTLED_COMPONENT/#*:}\"} ${BIT}" >> "${TMP_FILE}"
done
unset THROTTLED

# write metrics file
mv "${TMP_FILE}" "${METRICS_FILE}"

exit 0
